<?php

namespace DoctrineORMModule\Proxy\__CG__\Blog\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Article extends \Blog\Entity\Article implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'id', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'title', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'article', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'shortArticle', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'isPublic', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'category', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'comments');
        }

        return array('__isInitialized__', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'id', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'title', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'article', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'shortArticle', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'isPublic', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'category', '' . "\0" . 'Blog\\Entity\\Article' . "\0" . 'comments');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Article $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', array());

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticle($article)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticle', array($article));

        return parent::setArticle($article);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticle', array());

        return parent::getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortArticle($shortArticle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortArticle', array($shortArticle));

        return parent::setShortArticle($shortArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortArticle', array());

        return parent::getShortArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsPublic($isPublic)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsPublic', array($isPublic));

        return parent::setIsPublic($isPublic);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsPublic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsPublic', array());

        return parent::getIsPublic();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', array($category));

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', array());

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function getArticleForTable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticleForTable', array());

        return parent::getArticleForTable();
    }

    /**
     * {@inheritDoc}
     */
    public function getShortArticleForTable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortArticleForTable', array());

        return parent::getShortArticleForTable();
    }

    /**
     * {@inheritDoc}
     */
    public function getShortArticleForBlog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortArticleForBlog', array());

        return parent::getShortArticleForBlog();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullArticle', array());

        return parent::getFullArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

}
